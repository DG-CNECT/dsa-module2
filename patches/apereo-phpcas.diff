diff --git a/source/CAS.php b/source/CAS.php
index 8243a83..836ba6e 100644
--- a/source/CAS.php
+++ b/source/CAS.php
@@ -350,7 +350,7 @@ class phpCAS
         $changeSessionID = true, \SessionHandlerInterface $sessionHandler = null
     ) {
         phpCAS :: traceBegin();
-        if (is_object(self::$_PHPCAS_CLIENT)) {
+        if (is_object(self::$_PHPCAS_CLIENT) && env('APP_ENV') != 'testing') {
             phpCAS :: error(self::$_PHPCAS_INIT_CALL['method'] . '() has already been called (at ' . self::$_PHPCAS_INIT_CALL['file'] . ':' . self::$_PHPCAS_INIT_CALL['line'] . ')');
         }

diff --git a/source/CAS/Client.php b/source/CAS/Client.php
index 91642ee..cb0a9c2 100644
--- a/source/CAS/Client.php
+++ b/source/CAS/Client.php
@@ -970,7 +970,9 @@ class CAS_Client
         if (!$this->_isLogoutRequest()) {
             if (session_id() === "") {
                 // skip Session Handling for logout requests and if don't want it
-                session_start();
+                if (env('APP_ENV') != 'testing') {
+                    session_start();
+                }
                 phpCAS :: trace("Starting a new session " . session_id());
             }
             // init phpCAS session array
@@ -1144,7 +1146,7 @@ class CAS_Client
     public function setSessionHandler(\SessionHandlerInterface $sessionHandler)
     {
         $this->_sessionHandler = $sessionHandler;
-        if (session_status() !== PHP_SESSION_ACTIVE) {
+        if (session_status() !== PHP_SESSION_ACTIVE && env('APP_ENV') != 'testing') {
             return session_set_save_handler($this->_sessionHandler, true);
         }
         return true;
